pipeline {
	agent any
	environment {
	f_port = 5173
	d_port = 27017
	b_port = 5050
	Front_IM = "mern-frontend"
	back_IM = "mern-backend"
	Front_CN = "frontend"
	back_CN = "backend"
	net = "line"
	}
	stages {
	  stage('check') {
            steps {
                git url: 'https://github.com/My-projects-Files/Mark-9',
		branch: 'main' 
                  }
            }
	
	  stage('network') {
	    steps {
		script {
		 sh '''
		   echo 'docker network created'
		   docker network create ${net} || true
		 '''
		 }
	      }
	  }
 
	   stage('front-end') {
	     steps {
		 script {
		      sh '''
			ls -l
			 docker images
                          echo 'docker frontend build'
		    	  docker rm -f ${Front_CN} || true &&
			  docker rmi -f ${Front_IM} || true &&
			  docker build -t ${Front_IM}:led mern_app/mern/frontend/.
			  echo 'docker frontend deploy'
                          docker run --name=${Front_CN} --network=${net} -d -p ${f_port}:${f_port} ${Front_IM}:led
		       '''
		   }
	       }
	   }
	   stage('data-base') {
              steps {
		  script {
                        sh '''
                          echo 'docker mongodb build'
                          docker run --network=${net} --name mongodb -d -p ${d_port}:${d_port} -v ~/opt/data:/data/db mongo:latest || true
                        '''
                         }
 
                   }
             }
	    stage('back-end') {
               steps {
		 script {
                        sh '''
                          echo 'docker backend build'
                          docker rm -f ${back_CN} || true &&
                          docker rmi -f ${back_IM} || true &&
			  docker build -t ${back_IM}:led mern_app/mern/backend/.
			  echo 'docker backend deploy'
			  docker run --name=${back_CN} --network=${net} -d -p ${b_port}:${b_port} ${back_IM}:led
                        '''
                        }

                    }
               }
	}
	post {
	 always {
		echo "waiting for 30 min before remove docker container"
		sh 'sleep 180' // sleep for 3 min before clean up of container
		
		// clean up the container 
		echo "To clean up docker container and network"	
		sh '''
		    docker system prune -f
		    docker network remove ${net} || true
		    docker rm -f ${Front_CN} ${back_CN} mongodb || true
		    docker rmi -f ${Front_IM} ${back_IM} mongo:latest || true
		'''
	    }
	}
 }

